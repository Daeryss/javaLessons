https://refactoring.guru/ru/design-patterns/visitor
Посетитель (Visitor)

Назначение: описывает операцию, выполняемую с каждым объектом из
некоторой иерархии классов. Паттерн «Посетитель» позволяет определить
новую операцию, не изменяя классов этих объектов
Применимость:
Использовать паттерн «Посетитель» нужно тогда, когда набор типов иерархии
стабилен, а набор операций — нет.
Когда иерархия имеет большое кол-во операций различных для каждого
наследника

Посетитель — это поведенческий паттерн проектирования, который позволяет
добавлять в программу новые операции, не изменяя классы объектов, над
которыми эти операции могут выполняться.

            ===Структура===
1. Посетитель описывает общий интерфейс для всех типов посетителей.
Он объявляет набор методов, отличающихся типом входящего параметра,
которые нужны для запуска операции для всех типов конкретных элементов.
В языках, поддерживающих перегрузку методов, эти методы могут иметь
одинаковые имена, но типы их параметров должны отличаться.
2. Конкретные посетители реализуют какое-то особенное поведение для
всех типов элементов, которые можно подать через методы интерфейса посетителя.
3. Элемент описывает метод принятия посетителя. Этот метод должен иметь
единственный параметр, объявленный с типом интерфейса посетителя.
4. Конкретные элементы реализуют методы принятия посетителя. Цель этого
метода — вызвать тот метод посещения, который соответствует типу этого
элемента. Так посетитель узнает, с каким именно элементом он работает.
5. Клиентом зачастую выступает коллекция или сложный составной объект,
например, дерево Компоновщика. Зачастую клиент не привязан к конкретным
классам элементов, работая с ними через общий интерфейс элементов.

            ===Применимость===
 Когда вам нужно выполнить какую-то операцию над всеми элементами
 сложной структуры объектов, например, деревом.

 Посетитель позволяет применять одну и ту же операцию к объектам
 различных классов.

 Когда над объектами сложной структуры объектов надо выполнять
 некоторые не связанные между собой операции, но вы не хотите
 «засорять» классы такими операциями.

 Посетитель позволяет извлечь родственные операции из классов,
 составляющих структуру объектов, поместив их в один класс-посетитель.
 Если структура объектов является общей для нескольких приложений,
 то паттерн позволит в каждое приложение включить только нужные операции.

 Когда новое поведение имеет смысл только для некоторых классов из
 существующей иерархии.

 Посетитель позволяет определить поведение только для этих классов,
 оставив его пустым для всех остальных.

            ===Шаги реализации===
1. Создайте интерфейс посетителя и объявите в нём методы «посещения»
для каждого класса элемента, который существует в программе.
2. Опишите интерфейс элементов. Если вы работаете с уже существующими
классами, то объявите абстрактный метод принятия посетителей в базовом
классе иерархии элементов.
3. Реализуйте методы принятия во всех конкретных элементах. Они должны
переадресовывать вызовы тому методу посетителя, в котором тип параметра
совпадает с текущим классом элемента.
4. Иерархия элементов должна знать только о базовом интерфейсе посетителей.
С другой стороны, посетители будут знать обо всех классах элементов.
5. Для каждого нового поведения создайте конкретный класс посетителя.
Приспособьте это поведение для работы со всеми типами элементов,
реализовав все методы интерфейса посетителей.
   Вы можете столкнуться с ситуацией, когда посетителю нужен будет доступ
к приватным полям элементов. В этом случае вы можете либо раскрыть доступ
к этим полям, нарушив инкапсуляцию элементов, либо сделать класс посетителя
вложенным в класс элемента, если вам повезло писать на языке, который
поддерживает вложенность классов.
6. Клиент будет создавать объекты посетителей, а затем передавать
их элементам, используя метод принятия.

            ===Преимущества===
- Упрощает добавление операций, работающих со сложными структурами объектов.
- Объединяет родственные операции в одном классе.
- Посетитель может накапливать состояние при обходе структуры элементов.

            ===недостатки===
- Паттерн не оправдан, если иерархия элементов часто меняется.
- Может привести к нарушению инкапсуляции элементов.

Примеры Посетителей в стандартных библиотеках Java:

javax.lang.model.element.AnnotationValue и AnnotationValueVisitor
javax.lang.model.element.Element и ElementVisitor
javax.lang.model.type.TypeMirror и TypeVisitor
java.nio.file.FileVisitor и SimpleFileVisitor
javax.faces.component.visit.VisitContext и VisitCallback